//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataModel.Outage
{
    using System;
    using DataModel.Outage;
    
    
    /// A Measurement represents any measured, calculated or non-measured non-calculated quantity. Any piece of equipment may contain Measurements, e.g. a substation may have temperature measurements and door open indications, a transformer may have oil temperature and tank pressure measurements, a bay may contain a number of power flow measurements and a Breaker may contain a switch status measurement. 
    ///The PSR - Measurement association is intended to capture this use of Measurement and is included in the naming hierarchy based on EquipmentContainer. The naming hierarchy typically has Measurements as leafs, e.g. Substation-VoltageLevel-Bay-Switch-Measurement.
    ///Some Measurements represent quantities related to a particular sensor location in the network, e.g. a voltage transformer (PT) at a busbar or a current transformer (CT) at the bar between a breaker and an isolator. The sensing position is not captured in the PSR - Measurement association. Instead it is captured by the Measurement - Terminal association that is used to define the sensing location in the network topology. The location is defined by the connection of the Terminal to ConductingEquipment. 
    ///Two possible paths exist:
    ///1) Measurement-Terminal- ConnectivityNode-Terminal-ConductingEquipment
    ///2) Measurement-Terminal-ConductingEquipment
    ///Alternative 2 is the only allowed use. 
    ///When the sensor location is needed both Measurement-PSR and Measurement-Terminal are used. The Measurement-Terminal association is never used alone.
    public class Measurement : IdentifiedObject {
        
        private string cim_address;
        
        private const bool isAddressMandatory = true;
        
        private const string _addressPrefix = "cim";
        
        private System.Boolean? cim_isInput;
        
        private const bool isIsInputMandatory = true;
        
        private const string _isInputPrefix = "cim";
        
        /// One or more measurements may be associated with a terminal in the network
        private Terminal cim_Terminal;
        
        private const bool isTerminalMandatory = false;
        
        private const string _TerminalPrefix = "cim";
        
        public virtual string Address {
            get {
                return this.cim_address;
            }
            set {
                this.cim_address = value;
            }
        }
        
        public virtual bool AddressHasValue {
            get {
                return this.cim_address != null;
            }
        }
        
        public static bool IsAddressMandatory {
            get {
                return isAddressMandatory;
            }
        }
        
        public static string AddressPrefix {
            get {
                return _addressPrefix;
            }
        }
        
        public virtual bool IsInput {
            get {
                return this.cim_isInput.GetValueOrDefault();
            }
            set {
                this.cim_isInput = value;
            }
        }
        
        public virtual bool IsInputHasValue {
            get {
                return this.cim_isInput != null;
            }
        }
        
        public static bool IsIsInputMandatory {
            get {
                return isIsInputMandatory;
            }
        }
        
        public static string IsInputPrefix {
            get {
                return _isInputPrefix;
            }
        }
        
        public virtual Terminal Terminal {
            get {
                return this.cim_Terminal;
            }
            set {
                this.cim_Terminal = value;
            }
        }
        
        public virtual bool TerminalHasValue {
            get {
                return this.cim_Terminal != null;
            }
        }
        
        public static bool IsTerminalMandatory {
            get {
                return isTerminalMandatory;
            }
        }
        
        public static string TerminalPrefix {
            get {
                return _TerminalPrefix;
            }
        }
    }
}

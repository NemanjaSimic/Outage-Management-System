//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataModel.Outage
{
    using System;
    using DataModel.Outage;
    
    
    /// Discrete represents a discrete Measurement, i.e. a Measurement reprsenting discrete values, e.g. a Breaker position.
    public class Discrete : Measurement {
        
        private System.Boolean? cim_currentOpen;
        
        private const bool isCurrentOpenMandatory = true;
        
        private const string _currentOpenPrefix = "tdms";
        
        /// Normal value range maximum for any of the MeasurementValue.values. Used for scaling, e.g. in bar graphs or of telemetered raw values.
        private System.Int32? cim_maxValue;
        
        private const bool isMaxValueMandatory = true;
        
        private const string _maxValuePrefix = "cim";
        
        private DiscreteMeasurementType? cim_measurementType;
        
        private const bool isMeasurementTypeMandatory = true;
        
        private const string _measurementTypePrefix = "cim";
        
        /// Normal value range minimum for any of the MeasurementValue.values. Used for scaling, e.g. in bar graphs or of telemetered raw values
        private System.Int32? cim_minValue;
        
        private const bool isMinValueMandatory = true;
        
        private const string _minValuePrefix = "cim";
        
        /// Normal measurement value, e.g., used for percentage calculations.
        private System.Int32? cim_normalValue;
        
        private const bool isNormalValueMandatory = true;
        
        private const string _normalValuePrefix = "cim";
        
        public virtual bool CurrentOpen {
            get {
                return this.cim_currentOpen.GetValueOrDefault();
            }
            set {
                this.cim_currentOpen = value;
            }
        }
        
        public virtual bool CurrentOpenHasValue {
            get {
                return this.cim_currentOpen != null;
            }
        }
        
        public static bool IsCurrentOpenMandatory {
            get {
                return isCurrentOpenMandatory;
            }
        }
        
        public static string CurrentOpenPrefix {
            get {
                return _currentOpenPrefix;
            }
        }
        
        public virtual int MaxValue {
            get {
                return this.cim_maxValue.GetValueOrDefault();
            }
            set {
                this.cim_maxValue = value;
            }
        }
        
        public virtual bool MaxValueHasValue {
            get {
                return this.cim_maxValue != null;
            }
        }
        
        public static bool IsMaxValueMandatory {
            get {
                return isMaxValueMandatory;
            }
        }
        
        public static string MaxValuePrefix {
            get {
                return _maxValuePrefix;
            }
        }
        
        public virtual DiscreteMeasurementType MeasurementType {
            get {
                return this.cim_measurementType.GetValueOrDefault();
            }
            set {
                this.cim_measurementType = value;
            }
        }
        
        public virtual bool MeasurementTypeHasValue {
            get {
                return this.cim_measurementType != null;
            }
        }
        
        public static bool IsMeasurementTypeMandatory {
            get {
                return isMeasurementTypeMandatory;
            }
        }
        
        public static string MeasurementTypePrefix {
            get {
                return _measurementTypePrefix;
            }
        }
        
        public virtual int MinValue {
            get {
                return this.cim_minValue.GetValueOrDefault();
            }
            set {
                this.cim_minValue = value;
            }
        }
        
        public virtual bool MinValueHasValue {
            get {
                return this.cim_minValue != null;
            }
        }
        
        public static bool IsMinValueMandatory {
            get {
                return isMinValueMandatory;
            }
        }
        
        public static string MinValuePrefix {
            get {
                return _minValuePrefix;
            }
        }
        
        public virtual int NormalValue {
            get {
                return this.cim_normalValue.GetValueOrDefault();
            }
            set {
                this.cim_normalValue = value;
            }
        }
        
        public virtual bool NormalValueHasValue {
            get {
                return this.cim_normalValue != null;
            }
        }
        
        public static bool IsNormalValueMandatory {
            get {
                return isNormalValueMandatory;
            }
        }
        
        public static string NormalValuePrefix {
            get {
                return _normalValuePrefix;
            }
        }
    }
}

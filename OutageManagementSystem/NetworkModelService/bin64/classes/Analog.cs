//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Outage {
    using System;
    using Outage;
    
    
    /// Analog represents an analog Measurement.
    public class Analog : Measurement {
        
        private System.Single? cim_currentValue;
        
        private const bool isCurrentValueMandatory = true;
        
        private const string _currentValuePrefix = "tdms";
        
        private System.Single? cim_deviation;
        
        private const bool isDeviationMandatory = true;
        
        private const string _deviationPrefix = "tdms";
        
        /// Normal value range maximum for any of the MeasurementValue.values. Used for scaling, e.g. in bar graphs or of telemetered raw values.
        private System.Single? cim_maxValue;
        
        private const bool isMaxValueMandatory = true;
        
        private const string _maxValuePrefix = "cim";
        
        private AnalogMeasurementType? cim_measurementType;
        
        private const bool isMeasurementTypeMandatory = true;
        
        private const string _measurementTypePrefix = "cim";
        
        /// Normal value range minimum for any of the MeasurementValue.values. Used for scaling, e.g. in bar graphs or of telemetered raw values
        private System.Single? cim_minValue;
        
        private const bool isMinValueMandatory = true;
        
        private const string _minValuePrefix = "cim";
        
        /// Normal measurement value, e.g., used for percentage calculations.
        private System.Single? cim_normalValue;
        
        private const bool isNormalValueMandatory = true;
        
        private const string _normalValuePrefix = "cim";
        
        private System.Single? cim_scalingFactor;
        
        private const bool isScalingFactorMandatory = true;
        
        private const string _scalingFactorPrefix = "tdms";
        
        public virtual float CurrentValue {
            get {
                return this.cim_currentValue.GetValueOrDefault();
            }
            set {
                this.cim_currentValue = value;
            }
        }
        
        public virtual bool CurrentValueHasValue {
            get {
                return this.cim_currentValue != null;
            }
        }
        
        public static bool IsCurrentValueMandatory {
            get {
                return isCurrentValueMandatory;
            }
        }
        
        public static string CurrentValuePrefix {
            get {
                return _currentValuePrefix;
            }
        }
        
        public virtual float Deviation {
            get {
                return this.cim_deviation.GetValueOrDefault();
            }
            set {
                this.cim_deviation = value;
            }
        }
        
        public virtual bool DeviationHasValue {
            get {
                return this.cim_deviation != null;
            }
        }
        
        public static bool IsDeviationMandatory {
            get {
                return isDeviationMandatory;
            }
        }
        
        public static string DeviationPrefix {
            get {
                return _deviationPrefix;
            }
        }
        
        public virtual float MaxValue {
            get {
                return this.cim_maxValue.GetValueOrDefault();
            }
            set {
                this.cim_maxValue = value;
            }
        }
        
        public virtual bool MaxValueHasValue {
            get {
                return this.cim_maxValue != null;
            }
        }
        
        public static bool IsMaxValueMandatory {
            get {
                return isMaxValueMandatory;
            }
        }
        
        public static string MaxValuePrefix {
            get {
                return _maxValuePrefix;
            }
        }
        
        public virtual AnalogMeasurementType MeasurementType {
            get {
                return this.cim_measurementType.GetValueOrDefault();
            }
            set {
                this.cim_measurementType = value;
            }
        }
        
        public virtual bool MeasurementTypeHasValue {
            get {
                return this.cim_measurementType != null;
            }
        }
        
        public static bool IsMeasurementTypeMandatory {
            get {
                return isMeasurementTypeMandatory;
            }
        }
        
        public static string MeasurementTypePrefix {
            get {
                return _measurementTypePrefix;
            }
        }
        
        public virtual float MinValue {
            get {
                return this.cim_minValue.GetValueOrDefault();
            }
            set {
                this.cim_minValue = value;
            }
        }
        
        public virtual bool MinValueHasValue {
            get {
                return this.cim_minValue != null;
            }
        }
        
        public static bool IsMinValueMandatory {
            get {
                return isMinValueMandatory;
            }
        }
        
        public static string MinValuePrefix {
            get {
                return _minValuePrefix;
            }
        }
        
        public virtual float NormalValue {
            get {
                return this.cim_normalValue.GetValueOrDefault();
            }
            set {
                this.cim_normalValue = value;
            }
        }
        
        public virtual bool NormalValueHasValue {
            get {
                return this.cim_normalValue != null;
            }
        }
        
        public static bool IsNormalValueMandatory {
            get {
                return isNormalValueMandatory;
            }
        }
        
        public static string NormalValuePrefix {
            get {
                return _normalValuePrefix;
            }
        }
        
        public virtual float ScalingFactor {
            get {
                return this.cim_scalingFactor.GetValueOrDefault();
            }
            set {
                this.cim_scalingFactor = value;
            }
        }
        
        public virtual bool ScalingFactorHasValue {
            get {
                return this.cim_scalingFactor != null;
            }
        }
        
        public static bool IsScalingFactorMandatory {
            get {
                return isScalingFactorMandatory;
            }
        }
        
        public static string ScalingFactorPrefix {
            get {
                return _scalingFactorPrefix;
            }
        }
    }
}
